<?xml version="1.0" encoding="UTF-8"?>
<ehcache>
    <!--<diskStore path="java.io.tmpdir"/>-->
<!--     <diskStore path="/Users/nelin/java/svn-code/babymall/trunk/smaster/tmp"/> -->
    <defaultCache maxElementsInMemory="10000" eternal="false"
                  timeToIdleSeconds="120" timeToLiveSeconds="120" overflowToDisk="true"
                    diskPersistent="false"
                  diskExpiryThreadIntervalSeconds="120" memoryStoreEvictionPolicy="LRU"/>

    <cache name="andCache" maxElementsInMemory="10000"
           maxElementsOnDisk="1000" eternal="false" overflowToDisk="true"
           diskSpoolBufferSizeMB="20" timeToIdleSeconds="300" timeToLiveSeconds="600"
           memoryStoreEvictionPolicy="LFU"/>
    <cache name="webSocketSession" maxElementsInMemory="10000"
           maxElementsOnDisk="1000" eternal="false" overflowToDisk="true"
           diskSpoolBufferSizeMB="20" timeToIdleSeconds="300" timeToLiveSeconds="600"
           memoryStoreEvictionPolicy="LFU"/>
</ehcache>

      <!--/**
希望了解spring2.5的cache注解，可以参考如下内容：
Spring基于注解的缓存配置-EHCache AND OSCache
Spring基于注解的缓存配置-web应用实例

2.5时，spring没有自己的解决方案，都是采用对许多第三方cache框架的支持，比如EHCache和OSCache等等，不过到了3.1，spring就只提供EHCache的支持了，不过spring3.1还给出了自己的解决方案。



下面简单介绍一下spring3.1.M1中的cache功能。

spring3.1.M1中负责cache的模块是org.springframework.context-3.1.0.M1.jar



与2.5时的modules模块类似，3.1的注解缓存也是在方法上声明注解，3.1同样提供了两个注解：

@Cacheable：负责将方法的返回值加入到缓存中

@CacheEvict：负责清除缓存



@Cacheable 支持如下几个参数：

value：缓存位置名称，不能为空，如果使用EHCache，就是ehcache.xml中声明的cache的name

key：缓存的key，默认为空，既表示使用方法的参数类型及参数值作为key，支持SpEL

condition：触发条件，只有满足条件的情况才会加入缓存，默认为空，既表示全部都加入缓存，支持SpEL



例如：
Java代码  收藏代码

    //将缓存保存进andCache，并使用参数中的userId加上一个字符串(这里使用方法名称)作为缓存的key
    @Cacheable(value="andCache",key="#userId + 'findById'")
    public SystemUser findById(String userId) {
        SystemUser user = (SystemUser) dao.findById(SystemUser.class, userId);
        return user ;
    }
    //将缓存保存进andCache，并当参数userId的长度小于32时才保存进缓存，默认使用参数值及类型作为缓存的key
    @Cacheable(value="andCache",condition="#userId.length < 32")
    public boolean isReserved(String userId) {
        System.out.println("hello andCache"+userId);
        return false;
    }





@CacheEvict 支持如下几个参数：

value：缓存位置名称，不能为空，同上

key：缓存的key，默认为空，同上

condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持SpEL

allEntries：true表示清除value中的全部缓存，默认为false



例如：
Java代码  收藏代码

    //清除掉指定key的缓存
    @CacheEvict(value="andCache",key="#user.userId + 'findById'")
    public void modifyUserRole(SystemUser user) {
             System.out.println("hello andCache delete"+user.getUserId());
    }

    //清除掉全部缓存
    @CacheEvict(value="andCache",allEntries=true)
    public void setReservedUsers() {
        System.out.println("hello andCache deleteall");
    }



一般来说，我们的更新操作只需要刷新缓存中某一个值，所以定义缓存的key值的方式就很重要，最好是能够唯一，因为这样可以准确的清除掉特定的缓存，而不会影响到其它缓存值 ，

比如我这里针对用户的操作，使用(userId+方法名称)的方式设定key值 ，当然，你也可以找到更适合自己的方式去设定。



SpEL：Spring Expression Language

关于SpEL的介绍，可以参考如下地址：

http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/html/expressions.html








        **/-->